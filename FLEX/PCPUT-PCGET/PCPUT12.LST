                      ******************************************************************
                      *
                      * PCPUT
                      *    Allows transfer of files from a 6809 FLEX  file system to
                      *    a PC using the XMODEM protocol. Either port on the console
                      *    MP-S2 serial board can be used for the transfer.
                      *
                      *    Ver    Date      Desc
                      *    1.0  02/09/22   Mike Douglas, Initial version
                      *
                      *    1.1  03/11/24   Mike Douglas, If no file extension supplied,
                      *            display help banner and exit
                      *
                      ******************************************************************

                      * FLEX equates

 C840                 FCB equ $C840       ;FLEX system FCB
 CC02                 EOL equ $CC02       ;EOL delimiter from TTYSET
 D406                 FMS equ $D406       ;entry point for FMS calls
 D403                 FMSCLS  equ $D403       ;close all files
 CD03                 WARMS   equ $CD03       ;FLEX re-entry address
 CD15                 GETCHR  equ $CD15       ;get character from console
 CD1E                 PSTRNG  equ $CD1E       ;display string on console
 CD2D                 GETFIL  equ $CD2D       ;build FCB from command line parameter
 CD27                 NEXTCH  equ $CD27       ;get next char from command line
 CD3F                 RPTERR  equ $CD3F       ;report error from the FCB

                      * FMS equates

 0001                 OPENRD  equ $01     ;open for read
 0008                 FMSEOF  equ $08     ;FMS EOF error code

                      * Offsets into the FMS file control block (FCB)

 0000                 fcbCMD  equ 0       ;FMS command
 0001                 fcbERR  equ 1       ;error status
 000C                 fcbEXT  equ 12      ;file name extension
 003B                 fcbBIN  equ 59      ;binary/space compression flag

                      * XMODEM equates

 0080                 PKTLEN  equ 128     ;128 byte xmodem packet length
 0001                 SOH equ $01
 0004                 EOT equ $04
 0006                 ACK equ $06
 0015                 NAK equ $15
 001A                 EOF equ $1A     ;ctrl-z character
 000A                 XMTRIES equ 10      ;number of xmodem retries

                      * EC-6809 serial equates

 EEA0                 SIOADD  equ $EEA0     ;acia base address i/o board acia
 EF60                 SIOADD2 equ $EF60     ;acia base address cpu board
 0001                 SIORDRF equ $01     ;receive data register full
 0002                 SIOTDRE equ $02     ;transmit data register empty

                      * Misc equates

 0000                 CPU2MH  equ 0       ;2MHz CPU flag, non-zero=2MHz

 0020                 SPACE   equ $20     ;ASCII space
 000D                 CR  equ $0D     ;ASCII carriage return
 000A                 LF  equ $0A     ;ASCII line feed
 0003                 CTRLC   equ $03     ;ASCII ctrl-c

                      *-----------------------------------------------------------------------------
                      * Start of code
                      *-----------------------------------------------------------------------------
                          org $C100

 C100 2004            pcPut   bra start
 C102 0B                  fcb 11      ;version 1.1
 C103 EEA0            sioAddr fdb SIOADD      ;MP-S2 base address
 C105 00              cpu2Mhz fcb CPU2MH      ;2MHz CPU flag

                      * Validate command line file name and parameters

 C106 8EC840          start   ldx #FCB        ;use the system FCB
 C109 BDCD2D              jsr GETFIL      ;get file name from command line
 C10C 257C                bcs dspHelp     ;invalid, display help

 C10E A60C                lda fcbEXT,x    ;extension supplied?
 C110 2778                beq dspHelp     ;no, display help

 C112 8601                lda #OPENRD     ;FMS open for read
 C114 A700                sta fcbCMD,x
 C116 BDD406              jsr FMS
 C119 266A                bne dskErr      ;file not found

 C11B BDC258              jsr getType     ;get file type
 C11E BDC291              jsr getParm     ;get command line parameters
 C121 2667                bne dspHelp     ;command line error

                      * Prompt the user to start the XMODEM receive operation on the PC. 
                      *    Wait for a clear receive line for a least one second, then start
                      *    looking for NAK from the PC.

 C123 8EC428              ldx #mStart     ;display start file transfer prompt
 C126 BDCD1E              jsr PSTRNG
 C129 8601                lda #1      ;init xmodem block number to one
 C12B B7C476              sta blkNum
 C12E 7FC470              clr prvByte     ;set previous byte <> CR

 C131 BDC234          clear1  jsr rcvByte     ;loop until input clear for 1 second
 C134 26FB                bne clear1
                          
 C136 BDC234          waitNak jsr rcvByte     ;wait for a NAK = receiver ready
 C139 8115                cmpa    #NAK
 C13B 2706                beq rdFile      ;have NAK
                          
 C13D 8103                cmpa    #CTRLC      ;abort?
 C13F 26F5                bne waitNak     ;no
 C141 206B                bra pgmExit     ;else exit

                      * File transfer loop
                          
 C143 8EC47A          rdFile  ldx #xfrBuf     ;init bufPtr->xfrBuf
 C146 BFC46D              stx bufPtr
 C149 8680                lda #PKTLEN     ;byteCnt=bytes in an XMODEM packet
 C14B B7C46F              sta byteCnt
                          
 C14E B6C470          rdLoop  lda prvByte     ;was previous byte a CR?
 C151 810D                cmpa    #CR
 C153 2609                bne rdNotCr     ;no

 C155 B6C471              lda fWindow     ;Windows style EOL (CR/LF)?
 C158 2704                beq rdNotCr     ;no
 C15A 860A                lda #LF     ;else, yes, inject an LF
 C15C 2013                bra rdStore

 C15E 8EC840          rdNotCr ldx #FCB        ;issue read byte command to FMS
 C161 BDD406              jsr FMS     ;get next byte
 C164 262D                bne readErr     ;EOF most likely

 C166 810D                cmpa    #CR     ;carriage return?
 C168 2607                bne rdStore     ;no
 C16A F6C472              ldb fLinux      ;Linux style EOL (LF only)?
 C16D 2702                beq rdStore     ;no
 C16F 860A                lda #LF     ;else, substitute LF for CR

 C171 BEC46D          rdStore ldx bufPtr      ;put byte in XMODEM buffer
 C174 A780                sta 0,x+
 C176 B7C470              sta prvByte     ;save as previous byte sent

 C179 BFC46D              stx bufPtr
 C17C 7AC46F              dec byteCnt
 C17F 26CD                bne rdLoop      ;repeat for 128 bytes (PKTLEN)
                          
 C181 8D31                bsr sndPkt      ;send the XMODEM packet
 C183 20BE                bra rdFile      ;repeat
                       
                      * dskErr, dspHelp - Disk error or command line parameter error

 C185 BDCD3F          dskErr  jsr RPTERR      ;let FLEX report the error
 C188 2024                bra pgmExit

 C18A 8EC2D8          dspHelp ldx #mHelp
 C18D BDCD1E              jsr PSTRNG
 C190 7ECD03              jmp WARMS

                      * readErr - If EOF, fill the remainder of the XMODEM packet and
                      *    send it.

 C193 A601            readErr lda fcbERR,x    ;is the error code EOF?
 C195 8108                cmpa    #FMSEOF
 C197 26EC                bne dskErr          ;no, something else is wrong
                       
 C199 F6C46F              ldb byteCnt     ;on packet boundary?
 C19C C180                cmpb    #PKTLEN
 C19E 270C                beq sndDone     ;yes, nothing to fill, send complete
                          
 C1A0 861A                lda #EOF        ;else, fill with CP/M EOF character
 C1A2 BEC46D              ldx bufPtr
                          
 C1A5 A780            fillLp  sta 0,x+        ;fill with EOF
 C1A7 5A                  decb
 C1A8 26FB                bne fillLp
                          
 C1AA 8D08                bsr sndPkt      ;send final packet

 C1AC 8D4F            sndDone bsr sndEot      ;EOT to say we're done
 C1AE BDD403          pgmExit jsr FMSCLS      ;close open files
 C1B1 7ECD03              jmp WARMS       ;exit to FLEX

                      *-----------------------------------------------------------------------------
                      * sndPkt - Send the 128 byte packet in xfrBuf using the XMODEM protocol.
                      *-----------------------------------------------------------------------------
 C1B4 860A            sndPkt  lda #XMTRIES    ;init retry counter
 C1B6 B7C475              sta xmRetry

                      * Send header bytes

 C1B9 8601            reSend  lda #SOH        ;1st byte is SOH
 C1BB 8D5D                bsr sndByte
 C1BD B6C476              lda blkNum      ;2nd byte is the block number
 C1C0 8D58                bsr sndByte 
 C1C2 43                  coma            ;send complement of block number
 C1C3 8D55                bsr sndByte

                      * Send the 128 byte data portion of the packet followed by checksum

 C1C5 8EC47A              ldx #xfrBuf     ;X->packet data
 C1C8 8680                lda #PKTLEN     ;set transfer length
 C1CA B7C46F              sta byteCnt
 C1CD 7FC477              clr chkSum      ;init checksum

 C1D0 A680            pktLoop lda 0,x+        ;get next byte to send
 C1D2 8D46                bsr sndByte     ;send and update checksum
 C1D4 7AC46F              dec byteCnt     ;decrement bytes remaining
 C1D7 26F7                bne pktLoop

 C1D9 B6C477              lda chkSum      send the checksum
 C1DC 8D3C                bsr sndByte

                      * All bytes sent. Wait for the response.

 C1DE 8D54                bsr rcvByte     ;get the response character
 C1E0 2708                beq sndFail     ;timeout on response
                          
 C1E2 8106                cmpa    #ACK        ;ack received?
 C1E4 2604                bne sndFail     ;no, send failed
                          
 C1E6 7CC476              inc blkNum      ;increment block number
 C1E9 39                  rts

                      * sndFail - ACK not received, decrement retry count and try again.

 C1EA 7AC475          sndFail dec xmRetry     ;decrement retry counter
 C1ED 2706                beq xmFail      ;retries used up, failed xmodem transfer

 C1EF 8D43            clear2  bsr rcvByte     ;wait for 1 second of clear line
 C1F1 26FC                bne clear2

 C1F3 20C4                bra reSend      ;re-send the packet

                      * xmFail - Display failure message then restart program

 C1F5 8EC44E          xmFail  ldx #mXmdm      ;xmodem failure message
 C1F8 BDCD1E              jsr PSTRNG
 C1FB 20B1                bra pgmExit

                      *-----------------------------------------------------------------------------
                      *  sndEot - Send EOT character and wait for ACK response
                      *-----------------------------------------------------------------------------
 C1FD 860A            sndEot  lda #XMTRIES    ;init retry counter
 C1FF B7C475              sta xmRetry

 C202 8604            reEot   lda #EOT        ;send the EOT
 C204 8D14                bsr sndByte
 C206 8D2C                bsr rcvByte     ;wait for response
 C208 2705                beq eotFail     ;timeout

 C20A 8106                cmpa    #ACK        ;ACK received?
 C20C 2601                bne eotFail     ;no, EOT send failed

 C20E 39              eotExit rts         ;otherwise, we're done.

                      * Timeout waiting for ACK to EOT. Decrement retry counter and try again.

 C20F 7AC475          eotFail dec xmRetry     ;decrement retry counter
 C212 27FA                beq eotExit     ;just give up - xfer was probably good

 C214 8D1E            clear3  bsr rcvByte     ;wait for 1 second of clear line
 C216 26FC                bne clear3

 C218 20E8                bra reEot       ;try again

                      *-----------------------------------------------------------------------------
                      * sndByte - Send the byte in A through the serial port. Adds the byte 
                      *     to chkSum. Clobbers B.
                      *-----------------------------------------------------------------------------
 C21A 1F89            sndByte tfr a,b     ;B=character to send
 C21C FBC477              addb    chkSum      ;update the checksum
 C21F F7C477              stb chkSum

 C222 BFC478              stx ioSaveX     ;preserve X
 C225 BEC473              ldx portAdr     ;X->serial port
                              
 C228 E600            sbLoop  ldb 0,x     ;wait for OK to transmit
 C22A C402                andb    #SIOTDRE
 C22C 27FA                beq sbLoop  

 C22E A701                sta 1,x     ;send the character
 C230 BEC478              ldx ioSaveX     ;restore X
 C233 39                  rts

                      *-----------------------------------------------------------------------------
                      * rcvByte - Receive a byte from the serial port with a one second
                      *     timeout. If a timeout occurs, zero is returned in A and the zero 
                      *     flag is true. Otherwise, the character is returned in A and zero 
                      *     flag is false. 
                      *-----------------------------------------------------------------------------
 C234 8E765F          rcvByte ldx #30303      ;one second, 1MHz, 33 cycles per loop
 C237 B6C105              lda cpu2Mhz     ;2MHz CPU?
 C23A 2703                beq rbLoop      ;no, 1MHz
 C23C 8EECBE              ldx #60606      ;else double count for 2MHz

 C23F BFC478          rbLoop  stx ioSaveX     ;(6) preserve counter
 C242 BEC473              ldx portAdr     ;(6) X->serial port 
 C245 A600                lda 0,x     ;(4) see if a new character is present
 C247 8401                anda    #SIORDRF    ;(2)
 C249 2608                bne rbRead      ;(2) new character present

 C24B BEC478              ldx ioSaveX     ;(6) restore counter
 C24E 301F                leax    -1,x        ;(5) decrement timeout
 C250 26ED                bne rbLoop      ;(2)

 C252 39                  rts         ;timeout, exit with Z true
                          
 C253 A601            rbRead  lda 1,x     ;return character in A
 C255 1CFB                andcc   #$FB        ;ensure Z is false
 C257 39                  rts

                      *-----------------------------------------------------------------------------
                      * getType - Get file type (binary or text). If binary, fcbBIN in the FCB
                      *   is set to $FF to tell the FMS to treat the file as binary.
                      *-----------------------------------------------------------------------------
 C258 8601            getType lda #1      ;default to Windows text file
 C25A B7C471              sta fWindow
 C25D 7FC472              clr fLinux
 C260 8EC287              ldx #txtTbl     ;X->table of text file types

 C263 A600            gtLoop  lda 0,x     ;test for end of table
 C265 2717                beq gtBin       ;match not found, treat as binary
                          
 C267 B1C84C              cmpa    FCB+fcbEXT  ;compare 1st byte of extension
 C26A 260E                bne gtNext      ;doesn't match

 C26C A601                lda 1,x     ;compare 2nd byte
 C26E B1C84D              cmpa    FCB+fcbEXT+1
 C271 2607                bne gtNext      ;doesn't match

 C273 A602                lda 2,x     ;compare 3rd byte
 C275 B1C84E              cmpa    FCB+fcbEXT+2
 C278 270C                beq gtExit      ;found match, leave as text file

 C27A 3003            gtNext  leax    3,x     ;move to next entry
 C27C 20E5                bra gtLoop

 C27E 86FF            gtBin   lda #$FF        ;set binary mode for FMS
 C280 B7C87B              sta FCB+fcbBIN
 C283 7FC471              clr fWindow     ;can't be Windows text mode
 C286 39              gtExit  rts

                      * txtTbl- Table of "strong" text file types

 C287 545854          txtTbl  fcc "TXT"
 C28A 41534D              fcc "ASM"
 C28D 424153              fcc "BAS"
 C290 00                  fcb 0       ;terminate the table

                      *-----------------------------------------------------------------------------
                      * getParm - Get command line parameters. Look for optional digit specifying
                      *    a transfer port number, and text file flags W or L to force a text
                      *    mode transfer with CR/LF ("W"indows flag) or just CR ("L"inux flag).
                      *    Returns zero false for invalid parameters.
                      *-----------------------------------------------------------------------------
 C291 BEC103          getParm ldx sioAddr     ;default to i/o board port
 C294 BFC473              stx portAdr
                          
 C297 BDCD27          gpLoop  jsr NEXTCH      ;get next command line character
 C29A 810D                cmpa    #CR     ;terminate with CR or EOL character 
 C29C 2729                beq gpExit
 C29E B1CC02              cmpa    EOL
 C2A1 2724                beq gpExit

 C2A3 8120                cmpa    #SPACE      ;skip delimiters
 C2A5 27F0                beq gpLoop
 C2A7 812C                cmpa    #',
 C2A9 27EC                beq gpLoop

 C2AB 8A20                ora #$20        ;upper case to lower case
 C2AD 8163                cmpa    #'c     ;use cpu board port?
 C2AF 2717                beq gpPort      ;yes

 C2B1 8177                cmpa    #'w     ;Windows text file option?
 C2B3 270C                beq gpWin       ;yes

 C2B5 816C                cmpa    #'l     ;Linux text file option?
 C2B7 260E                bne gpExit      ;no, invalid command line

 C2B9 7CC472              inc fLinux      ;use Linux EOL (LF)
 C2BC 7FC471              clr fWindow     ;not Windows EOL
 C2BF 2003                bra gpLinux

 C2C1 7CC471          gpWin   inc fWindow     ;set Windows EOL mode
 C2C4 7FC87B          gpLinux clr FCB+fcbBIN  ;force text file mode
 C2C7 39              gpExit  rts

 C2C8 8EEF60          gpPort  ldx #SIOADD2     ;use cpu board port
 C2CB BFC473              stx portAdr

 C2CE 8603                lda #3      ;reset serial port
 C2D0 A700                sta 0,x
 C2D2 8615                lda #$15        ;8N1
 C2D4 A700                sta 0,x
 C2D6 20BF                bra gpLoop      ;look for more params

                      *-----------------------------------------------------------------------------
                      * Message constants 
                      *-----------------------------------------------------------------------------
 C2D8 0D0A            mHelp   fcb CR,LF
 C2DA 50435055542076      fcc "PCPUT v1.1 for ELEKTOR EC-6809 FLEX"
 C2E1 312E3120666F72
 C2E8 20454C454B544F
 C2EF 522045432D3638
 C2F6 303920464C4558
 C2FD 0D0A0A              fcb CR,LF,LF
 C300 55736167653A        fcc "Usage:"
 C306 0D0A                fcb CR,LF
 C308 20205043505554      fcc "  PCPUT FILE.EXT [C] [W|L]"
 C30F 2046494C452E45
 C316 5854205B435D20
 C31D 5B577C4C5D
 C322 0D0A0A              fcb CR,LF,LF
 C325 57686572653A        fcc "Where:"
 C32B 0D0A                fcb CR,LF
 C32D 202043203D2055      fcc "  C = Use port on 'C'pu board ($EF60)"
 C334 736520706F7274
 C33B 206F6E20274327
 C342 707520626F6172
 C349 64202824454636
 C350 3029
 C352 0D0A                fcb CR,LF
 C354 2020577C4C203D      fcc "  W|L = Force transfer as 'W'indows or 'L'inux text file"
 C35B 20466F72636520
 C362 7472616E736665
 C369 72206173202757
 C370 27696E646F7773
 C377 206F7220274C27
 C37E 696E7578207465
 C385 78742066696C65
 C38C 0D0A0A              fcb CR,LF,LF
 C38F 44656661756C74      fcc "Defaults:"
 C396 733A
 C398 0D0A                fcb CR,LF
 C39A 20205472616E73      fcc "  Transfer Port: ACIA2 at $EEA0"
 C3A1 66657220506F72
 C3A8 743A2041434941
 C3AF 32206174202445
 C3B6 454130
 C3B9 0D0A                fcb CR,LF
 C3BB 2020457874656E      fcc "  Extensions TXT, ASM, and BAS transfer as a Windows"
 C3C2 73696F6E732054
 C3C9 58542C2041534D
 C3D0 2C20616E642042
 C3D7 4153207472616E
 C3DE 73666572206173
 C3E5 20612057696E64
 C3EC 6F7773
 C3EF 0D0A                fcb CR,LF
 C3F1 2020636F6D7061      fcc "  compatible text file. All others as a binary file."
 C3F8 7469626C652074
 C3FF 6578742066696C
 C406 652E20416C6C20
 C40D 6F746865727320
 C414 61732061206269
 C41B 6E617279206669
 C422 6C652E
 C425 0D0A04              fcb CR,LF,EOT

 C428 53746172742058  mStart  fcc "Start XMODEM receive on the PC now..."
 C42F 4D4F44454D2072
 C436 65636569766520
 C43D 6F6E2074686520
 C444 5043206E6F772E
 C44B 2E2E
 C44D 04                  fcb EOT

 C44E 584D4F44454D20  mXmdm   fcc "XMODEM communication failure"
 C455 636F6D6D756E69
 C45C 636174696F6E20
 C463 6661696C757265
 C46A 0D0A04              fcb CR,LF,EOT

                      *-----------------------------------------------------------------------------
                      * Data area
                      *-----------------------------------------------------------------------------
 C46D                 bufPtr  rmb 2       ;pointer into transfer buffer
 C46F                 byteCnt rmb 1       ;byte count remaining
 C470                 prvByte rmb 1       ;previous byte read
 C471                 fWindow rmb 1       ;non-zero=Windows text (CR/LF for EOL)
 C472                 fLinux  rmb 1       ;non-zero=Linux text (LF for EOL)

 C473                 portAdr rmb 2       ;serial port address
 C475                 xmRetry rmb 1       ;xmodem retry counter
 C476                 blkNum  rmb 1       ;current xmodem block number
 C477                 chkSum  rmb 1       ;packet checksum
 C478                 ioSaveX rmb 2       ;save X for I/O subroutines

 C47A                 xfrBuf  rmb PKTLEN      ;XMODEM transfer buffer
 C100                     end pcPut

SYMBOL TABLE
       ACK 00 0006    BLKNUM 02 C476    BUFPTR 02 C46D   BYTECNT 02 C46F
    CHKSUM 02 C477    CLEAR1 02 C131    CLEAR2 02 C1EF    CLEAR3 02 C214
    CPU2MH 00 0000   CPU2MHZ 02 C105        CR 00 000D     CTRLC 00 0003
    DSKERR 02 C185   DSPHELP 02 C18A       EOF 00 001A       EOL 00 CC02
       EOT 00 0004   EOTEXIT 02 C20E   EOTFAIL 02 C20F       FCB 00 C840
    FCBBIN 00 003B    FCBCMD 00 0000    FCBERR 00 0001    FCBEXT 00 000C
    FILLLP 02 C1A5    FLINUX 02 C472       FMS 00 D406    FMSCLS 00 D403
    FMSEOF 00 0008   FWINDOW 02 C471    GETCHR 00 CD15    GETFIL 00 CD2D
   GETPARM 02 C291   GETTYPE 02 C258    GPEXIT 02 C2C7   GPLINUX 02 C2C4
    GPLOOP 02 C297    GPPORT 02 C2C8     GPWIN 02 C2C1     GTBIN 02 C27E
    GTEXIT 02 C286    GTLOOP 02 C263    GTNEXT 02 C27A   IOSAVEX 02 C478
        LF 00 000A     MHELP 02 C2D8    MSTART 02 C428     MXMDM 02 C44E
       NAK 00 0015    NEXTCH 00 CD27    OPENRD 00 0001     PCPUT 02 C100
   PGMEXIT 02 C1AE    PKTLEN 00 0080   PKTLOOP 02 C1D0   PORTADR 02 C473
   PRVBYTE 02 C470    PSTRNG 00 CD1E    RBLOOP 02 C23F    RBREAD 02 C253
   RCVBYTE 02 C234    RDFILE 02 C143    RDLOOP 02 C14E   RDNOTCR 02 C15E
   RDSTORE 02 C171   READERR 02 C193     REEOT 02 C202    RESEND 02 C1B9
    RPTERR 00 CD3F    SBLOOP 02 C228    SIOADD 00 EEA0   SIOADD2 00 EF60
   SIOADDR 02 C103   SIORDRF 00 0001   SIOTDRE 00 0002   SNDBYTE 02 C21A
   SNDDONE 02 C1AC    SNDEOT 02 C1FD   SNDFAIL 02 C1EA    SNDPKT 02 C1B4
       SOH 00 0001     SPACE 00 0020     START 02 C106    TXTTBL 02 C287
   WAITNAK 02 C136     WARMS 00 CD03    XFRBUF 02 C47A    XMFAIL 02 C1F5
   XMRETRY 02 C475   XMTRIES 00 000A
90 SYMBOLS

0 error(s), 0 warning(s)
