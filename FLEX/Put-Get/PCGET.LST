                      ******************************************************************
                      *
                      * PCGET9
                      *    Allows transfer of files from a PC to a 6809 FLEX file 
                      *    system using the XMODEM protocol. Either port on the
                      *    console MP-S2 serial board can be used for the transfer.
                      *
                      *    Ver    Date      Desc
                      *    1.0  02/09/22   Mike Douglas, Initial version
                      *
                      *    Adapted to Elektor EC-6809 by Ph. Roehr 12/2023
                      *
                      ******************************************************************

                      * FLEX equates

 C840                 FCB     equ $C840       ;FLEX system FCB
 CC02                 EOL     equ $CC02       ;EOL delimiter from TTYSET
 D406                 FMS     equ $D406       ;entry point for FMS calls
 D403                 FMSCLS  equ $D403       ;close all files
 CD03                 WARMS   equ $CD03       ;FLEX re-entry address
 CD15                 GETCHR  equ $CD15       ;get character from console
 CD1E                 PSTRNG  equ $CD1E       ;display string on console
 CD2D                 GETFIL  equ $CD2D       ;build FCB from command line parameter
 CD27                 NEXTCH  equ $CD27       ;get next char from command line
 CD3F                 RPTERR  equ $CD3F       ;report error from the FCB

                      * FMS equates

 0002                 OPENWRT equ $02         ;open for write
 000C                 DELFILE equ $0C         ;delete file
 0003                 EXISTS  equ $03         ;file exists error
 00FC                 SECLEN  equ 252         ;length of user data in sector

                      * Offsets into the FMS file control block (FCB)

 0000                 fcbCMD  equ 0           ;FMS command
 0001                 fcbERR  equ 1           ;error status
 0004                 fcbFN   equ 4           ;file name
 000C                 fcbEXT  equ 12          ;file name extension
 0017                 fcbMAP  equ 23          ;set to $02 for random file
 003B                 fcbBIN  equ 59          ;binary/space compression flag

                      * XMODEM equates

 0080                 PKTLEN  equ 128         ;128 byte xmodem packet length
 0001                 SOH     equ $01
 0004                 EOT     equ $04
 0006                 ACK     equ $06
 0015                 NAK     equ $15
 001A                 EOF     equ $1A         ;ctrl-z character
 000A                 XMTRIES equ 10          ;number of xmodem retries

                      * Serial port equates

 EF5C                 SIOADD  equ $EF60-4     ;ACIA base address
 0001                 SIORDRF equ $01         ;receive data register full
 0002                 SIOTDRE equ $02         ;transmit data register empty

                      * Misc equates

 0000                 CPU2MH  equ 0           ;2MHz CPU flag, non-zero=2MHz

 0020                 SPACE   equ $20         ;ASCII space 
 0009                 TAB     equ $09         ;ASCII tab
 000D                 CR      equ $0D         ;ASCII carriage return
 000A                 LF      equ $0A         ;ASCII line feed
 0003                 CTRLC   equ $03         ;ASCII ctrl-c

                      *-----------------------------------------------------------------------------
                      * Start of code
                      *-----------------------------------------------------------------------------
                              org $C100

 C100 2004            pcGet   bra start
 C102 0A                      fcb 10          ;version 1.0
 C103 EF5C            sioAddr fdb SIOADD      ;ACIA base address
 C105 00              cpu2Mhz fcb CPU2MH      ;CPU 2MHz flag

                      * Validate command line file name and parameters

 C106 8EC840          start   ldx #FCB        ;use the system FCB
 C109 BDCD2D                  jsr GETFIL      ;get file name from command line
 C10C 255D                    bcs dspHelp     ;invalid, display help

 C10E BDC280                  jsr opeWrt      ;open file for write
 C111 2653                    bne dskErr      ;failed
                          
 C113 BDC2C8                  jsr getType     ;get file type
 C116 BDC2FE                  jsr getParm     ;get command line parameters
 C119 2650                    bne dspHelp     ;command line error

                      * Prompt the user to send the file, send NAK to tell the host we're 
                      *    ready for XMODEM reception.

 C11B 8EC49F                  ldx #mStart     ;display start file transfer prompt
 C11E BDCD1E                  jsr PSTRNG
                          
 C121 8EC4F4                  ldx #xfrBuf     ;init pointers
 C124 BFC4EB                  stx insPtr      ;receive insert pointer
 C127 BFC4E2                  stx remPtr      ;remove pointer
 C12A 7FC4E5                  clr mod252      ;clear modulus 252 accumulator
                          
 C12D 8601                    lda #1          ;init xmodem block number to one
 C12F B7C4EE                  sta blkNum
 C132 8615                    lda #NAK        ;send starting NAK after purging input data
 C134 BDC237                  jsr purgSio

 C137 BDC1CE                  jsr rcvPkt      ;queue and remain one packet ahead
 C13A 261F                    bne pgmExit     ;zero length file
 C13C 8606                    lda #ACK        ;else, ack the packet
 C13E BDC23F                  jsr sndByte
                          
                      * File transfer loop
                          
 C141 B6C4E5          wrtFile lda mod252      ;mod252 = total bytes received MOD 252
 C144 8B80                    adda #PKTLEN    ;add bytes received
 C146 2504                    bcs subMod      ;>252, so subtract 252
 C148 81FC                    cmpa #SECLEN    ;>=252?
 C14A 2502                    bcs saveMod     ;no
 C14C 80FC            subMod  suba #SECLEN    ;perform stepwise MOD 252 as we go along
 C14E B7C4E5          saveMod sta mod252      ;save updated value
                          
 C151 8D7B                    bsr rcvPkt      ;get next XMODEM packet
 C153 2604                    bne rcvDone     ;EOT received, all done
 C155 8D29                    bsr wrtPkt      ;else, write the packet to disk
 C157 20E8                    bra wrtFile     ;repeat

 C159 8D19            rcvDone bsr wrtLast     ;write last packet (possibly partial)
                          
 C15B 8606            pgmExit lda #ACK        ;ack possible eot
 C15D BDC23F                  jsr sndByte
 C160 BDD403                  jsr FMSCLS      ;close open files
 C163 7ECD03                  jmp WARMS       ;exit to FLEX
                          
                      * dskErr, dspHelp - Disk error or command line parameter error

 C166 BDCD3F          dskErr  jsr RPTERR      ;let FLEX report the error
 C169 20F0                    bra pgmExit

 C16B 8EC340          dspHelp ldx #mHelp
 C16E BDCD1E                  jsr PSTRNG
 C171 7ECD03                  jmp WARMS

                      *-----------------------------------------------------------------------------
                      * wrtPkt - Write PKTLEN bytes to disk from the XMODEM buffer.
                      * wrtLast - Same but for the final write. For binary files, this is most
                      *    likely less than a full packet based on mod252.
                      *-----------------------------------------------------------------------------
 C174 B6C4E8          wrtLast lda fText       ;text file?
 C177 2607                    bne wrtPkt      ;yes, process all bytes
                          
 C179 8680                    lda #PKTLEN     ;compute number of bytes left to write
 C17B B0C4E5                  suba mod252     ;write count = 128 minus the excess bytes       
 C17E 2002                    bra wpSave

                      * wrtPkt entry

 C180 8680            wrtPkt  lda #PKTLEN     ;write 128 bytes
 C182 B7C4E4          wpSave  sta byteCnt     ;byteCnt is num bytes to write
                          
 C185 BEC4E2          wdLoop  ldx remPtr      ;get next byte from xfrBuf
 C188 A680                    lda 0,x+
 C18A BFC4E2                  stx remPtr
                          
 C18D F6C4E8                  ldb fText       ;text file?
 C190 2716                    beq wdBin       ;no

 C192 810D                    cmpa #CR        ;ASCII CR?
 C194 271A                    beq wdSkip      ;yes, skip it
 C196 811A                    cmpa #EOF       ;ASCII (CP/M) EOF?
 C198 2716                    beq wdSkip      ;yes, skip it

 C19A 810A                    cmpa #LF        ;ASCII LF?
 C19C 2604                    bne wdTab       ;no, check for tab
 C19E 860D                    lda #CR         ;substitute CR
 C1A0 2006                    bra wdBin

 C1A2 8109            wdTab   cmpa #TAB       ;is byte a tab?
 C1A4 2602                    bne wdBin       ;no
 C1A6 8620                    lda #SPACE      ;else, substitute space for tab
                              
 C1A8 8EC840          wdBin   ldx #FCB        ;X->FCB for disk I/O    
 C1AB BDD406                  jsr FMS         ;write the byte
 C1AE 26B6                    bne dskErr

 C1B0 7AC4E4          wdSkip  dec byteCnt
 C1B3 26D0                    bne wdLoop      ;repeat for 128 bytes (typically)

 C1B5 BEC4E2                  ldx remPtr      ;increment and wrap the remove pointer
 C1B8 8CC5F4                  cpx #BUFEND
 C1BB 2606                    bne wdAck
 C1BD 8EC4F4                  ldx #xfrBuf
 C1C0 BFC4E2                  stx remPtr

 C1C3 8606            wdAck   lda #ACK        ;ack the packet
 C1C5 BDC23F                  jsr sndByte
 C1C8 39                      rts

                      *-----------------------------------------------------------------------------
                      * rcvPkt - Receive a 128 byte xmodem packet into xfrBuf as pointed to
                      *   by insPtr. Updates insPtr on exit.
                      *-----------------------------------------------------------------------------
 C1C9 8615            nakPkt  lda #NAK        ;NAK the packet
 C1CB BDC237                  jsr purgSio     ;purge receive for 1s then xmit NAK

                      * Wait for SOH, EOT or CTRL-C

 C1CE 8603            rcvPkt  lda #3          ;3 second timeout for SOH
 C1D0 BDC253                  jsr rcvByte     
 C1D3 27F4                    beq nakPkt      ;timeout

 C1D5 8104                    cmpa    #EOT    ;EOT to say we're done?
 C1D7 2602                    bne notEot      ;no
 C1D9 4D                      tsta            ;return zero false
 C1DA 39                      rts

 C1DB 8103            notEot  cmpa #CTRLC     ;ctrl-c to abort?
 C1DD 2602                    bne notCtlc     ;no
 C1DF 4D                      tsta            ;return zero false
 C1E0 39                      rts
                          
 C1E1 8101            notCtlc cmpa #SOH        ;SOH received?
 C1E3 26E9                    bne rcvPkt      ;no, keep looking

 C1E5 8D6A                    bsr rcv1Sec     ;get the block number (1s timeout)
 C1E7 27E0                    beq nakPkt      ;timeout, NAK and start over
 C1E9 B7C4F0                  sta rcvBlk      ;save the received block number
                          
 C1EC 8D63                    bsr rcv1Sec     ;get not block number
 C1EE 27D9                    beq nakPkt      ;timeout, NAK and start over
 C1F0 B7C4F1                  sta rcvNBlk     ;save not block number

                      * Receive the 128 byte data portion of the packet

 C1F3 BEC4EB                  ldx insPtr      ;init buffer pointer
 C1F6 8680                    lda #PKTLEN     ;set transfer length
 C1F8 B7C4E4                  sta byteCnt
 C1FB 7FC4EF                  clr chkSum      ;init checksum

 C1FE 8D51            pktLoop bsr rcv1Sec     ;get data byte (1s timeout)
 C200 27C7                    beq nakPkt      ;timeout

 C202 A780                    sta 0,x+        ;save the byte
 C204 BBC4EF                  adda chkSum     ;update checksum
 C207 B7C4EF                  sta chkSum

 C20A 7AC4E4                  dec byteCnt     ;decrement byte counter
 C20D 26EF                    bne pktLoop     ;and repeat

                      * Verify the checksum

 C20F 8D40                    bsr rcv1Sec     ;get data byte
 C211 27B6                    beq nakPkt      ;timeout

 C213 B1C4EF                  cmpa chkSum     ;checksum match
 C216 26B1                    bne nakPkt      ;no, packet error

                      * Checksum good, verify block numbers

 C218 B6C4F1                  lda rcvNBlk     ;verify rcvBlk = not(rcvNBlk)
 C21B 43                      coma
 C21C B1C4F0                  cmpa rcvBlk     ;match?
 C21F 26A8                    bne nakPkt      ;no, packet error

 C221 B1C4EE                  cmpa blkNum     ;rcvBlk = expected bklNum?
 C224 26A3                    bne nakPkt      ;no, packet error
                          
 C226 4C                      inca            ;increment expected block number
 C227 B7C4EE                  sta blkNum
                          
 C22A 8CC5F4                  cpx #BUFEND     ;at end of xfrBuf?
 C22D 2603                    bne savePtr     ;no
 C22F 8EC4F4                  ldx #xfrBuf     ;reset to start
 C232 BFC4EB          savePtr stx insPtr
 C235 4F                      clra            ;return zero status
 C236 39                      rts

                      *-----------------------------------------------------------------------------
                      * purgSio - Wait for 1 second of idle time on receive line, then transmit the
                      *   character passed in A (usually ACK or NAK). Clobbers B.
                      *-----------------------------------------------------------------------------
 C237 3402            purgSio pshs a          ;save character to send

 C239 8D16            purge   bsr rcv1Sec     ;wait for 1 second without activity
 C23B 26FC                    bne purge

 C23D 3502                    puls a          ;get back the character to send
                      *                       ;fall into to sndByte
                                      
                      *-----------------------------------------------------------------------------
                      * sndByte - Send the byte in A through the serial port. Clobbers B.
                      *-----------------------------------------------------------------------------
 C23F BFC4F2          sndByte stx ioSaveX     ;preserve X
 C242 BEC4E9                  ldx portAdr     ;X->serial port
                              
 C245 E600            sbLoop  ldb 0,x         ;wait for OK to transmit
 C247 C402                    andb #SIOTDRE
 C249 27FA                    beq sbLoop  

 C24B A701                    sta 1,x         ;send the character
 C24D BEC4F2                  ldx ioSaveX     ;restore X
 C250 39                      rts

                      *-----------------------------------------------------------------------------
                      * rcvByte - Receive a byte from the serial port with a timeout specified
                      *     in seconds in A. If a timeout occurs, zero is returned in A and the
                      *     zero flag is true. Otherwise, the character is returned in A and zero 
                      *     flag is false. Clobbers A, B
                      *-----------------------------------------------------------------------------
 C251 8601            rcv1Sec lda #1          ;one second timeout

 C253 BFC4E6          rcvByte stx saveX       ;preserve X
 C256 F6C105                  ldb cpu2Mhz     ;2MHz CPU?
 C259 2701                    beq rb1Sec      ;no
 C25B 48                      asla            ;else double count for 2MHz

 C25C 8E765F          rb1Sec  ldx #30303      ;one second, 1MHz, 33 cycles per loop

 C25F BFC4F2          rbLoop  stx ioSaveX     ;(6) preserve counter
 C262 BEC4E9                  ldx portAdr     ;(6) X->serial port
 C265 E600                    ldb 0,x         ;(4) see if a new character is present
 C267 C401                    andb #SIORDRF   ;(2)
 C269 260F                    bne rbRead      ;(2) new character present

 C26B BEC4F2                  ldx ioSaveX     ;(6) restore counter
 C26E 301F                    leax    -1,x        ;(5) decrement timeout
 C270 26ED                    bne rbLoop      ;(2)

 C272 4A                      deca            ;decrement seconds count
 C273 26E7                    bne rb1Sec
                          
 C275 BEC4E6                  ldx saveX       ;restore X
 C278 4F                      clra            ;exit with zero status (timeout)
 C279 39                      rts
                          
 C27A A601            rbRead  lda 1,x         ;A=byte received
 C27C BEC4E6                  ldx saveX       ;restore X (non-zero)
 C27F 39                      rts

                      *-----------------------------------------------------------------------------
                      * opeWrt - Open file for write. If the file already exists, prompt
                      *    the user to confirm replacement. Exits with zero true if the
                      *    open is successful.
                      *-----------------------------------------------------------------------------
 C280 8EC840          opeWrt  ldx #FCB        ;X->FCB to use
 C283 8602                    lda #OPENWRT    ;FMS open for write
 C285 A700                    sta fcbCMD,x
 C287 BDD406                  jsr FMS
 C28A 273B                    beq owExit      ;new file opened

 C28C A601                    lda fcbERR,x    ;status code from open
 C28E 8103                    cmpa #EXISTS    ;file exists error?
 C290 2635                    bne owExit      ;no, some other error
                          
 C292 8EC4C2                  ldx #mExists    ;"file exists, delete?"
 C295 BDCD1E                  jsr PSTRNG
 C298 BDCD15                  jsr GETCHR      ;get byte from the console
 C29B 8A20                    ora #$20        ;upper case letters to lower case
 C29D 8179                    cmpa #'y        ;confirmed?
 C29F 2703                    beq owDelet     ;yes, delete
 C2A1 7ECD03                  jmp WARMS       ;else exit to FLEX
                          
 C2A4 8EC4D7          owDelet ldx #mWork      "Working..."
 C2A7 BDCD1E                  jsr PSTRNG

 C2AA 8EC840                  ldx #FCB        ;delete the file
 C2AD 860C                    lda #DELFILE
 C2AF A700                    sta fcbCMD,x
 C2B1 A604                    lda fcbFN,x     ;save 1st byte of file name
 C2B3 B7C4E6                  sta saveX
 C2B6 BDD406                  jsr FMS
 C2B9 260C                    bne owExit      ;delete failed
                          
 C2BB B6C4E6                  lda saveX       ;restore first char of file name
 C2BE A704                    sta fcbFN,x
 C2C0 8602                    lda #OPENWRT    ;FMS open for write
 C2C2 A700                    sta fcbCMD,x
 C2C4 BDD406                  jsr FMS
                          
 C2C7 39              owExit  rts

                      *-----------------------------------------------------------------------------
                      * getType - Get file type (binary or text). If binary, fcbBIN in the FCB
                      *   is set to $FF to tell the FMS to treat the file as binary.
                      *-----------------------------------------------------------------------------
 C2C8 8EC2F4          getType ldx #txtTbl     ;X->table of text file types
 C2CB 86FF                    lda #$FF        ;default to text file
 C2CD B7C4E8                  sta fText

 C2D0 A600            gtLoop  lda 0,x         ;test for end of table
 C2D2 2717                    beq gtBin       ;match not found, treat as binary
                          
 C2D4 B1C84C                  cmpa FCB+fcbEXT ;compare 1st byte of extension
 C2D7 260E                    bne gtNext      ;doesn't match

 C2D9 A601                    lda 1,x         ;compare 2nd byte
 C2DB B1C84D                  cmpa FCB+fcbEXT+1
 C2DE 2607                    bne gtNext      ;doesn't match

 C2E0 A602                    lda 2,x         ;compare 3rd byte
 C2E2 B1C84E                  cmpa FCB+fcbEXT+2
 C2E5 270C                    beq gtExit      ;found match, leave as text file

 C2E7 3003            gtNext  leax 3,x        ;move to next entry
 C2E9 20E5                    bra gtLoop

 C2EB 86FF            gtBin   lda #$FF        ;set binary mode for FMS
 C2ED B7C87B                  sta FCB+fcbBIN
 C2F0 7FC4E8                  clr fText       ;not a text file
 C2F3 39              gtExit  rts

                      * txtTbl- Table of "strong" text file types

 C2F4 545854          txtTbl  fcc "TXT"
 C2F7 41534D                  fcc "ASM"
 C2FA 424153                  fcc "BAS"
 C2FD 00                      fcb 0           ;terminate the table

                      *-----------------------------------------------------------------------------
                      * getParm - Get command line parameters. Look for
                      *    the text file flags (W, L), or 'R'andom file flag.
                      *    Returns zero false for invalid parameters.
                      *-----------------------------------------------------------------------------
 C2FE BEC103          getParm ldx sioAddr     ;default to console port
 C301 3004                    leax 4,x        ;bottom port is console
 C303 BFC4E9                  stx portAdr
                          
 C306 BDCD27          gpLoop  jsr NEXTCH      ;get next command line character
 C309 810D                    cmpa #CR        ;terminate with CR or EOL character 
 C30B 2732                    beq gpExit
 C30D B1CC02                  cmpa EOL
 C310 272D                    beq gpExit

 C312 8120                    cmpa #SPACE     ;skip delimiters
 C314 27F0                    beq gpLoop
 C316 812C                    cmpa #',
 C318 27EC                    beq gpLoop
                          
 C31A 8157                    cmpa #'W        ;Windows text file option?
 C31C 271B                    beq gpText      ;yes
 C31E 8177                    cmpa #'w        ;Windows text file option?
 C320 2717                    beq gpText      ;yes
                              
 C322 814C                    cmpa #'L        ;Linux text file option?
 C324 2713                    beq gpText      ;yes
 C326 816C                    cmpa #'l        ;Linux text file option?
 C328 270F                    beq gpText      ;yes
                              
 C32A 8152                    cmpa #'R        ;random file?
 C32C 2704                    beq gpRand      ;yes
 C32E 8172                    cmpa #'r        ;random file?
 C330 260D                    bne gpExit      ;no, have bad command line
                                  
 C332 8602            gpRand  lda #2          ;indicate random file
 C334 B7C857                  sta FCB+fcbMAP
 C337 4F                      clra            ;exit with zero status
 C338 39                      rts 

 C339 B7C4E8          gpText  sta fText       ;set text flag true
 C33C 7FC87B                  clr FCB+fcbBIN  ;force text file mode
 C33F 39              gpExit  rts

                      *-----------------------------------------------------------------------------
                      * Message constants 
                      *-----------------------------------------------------------------------------
 C340 0D0A            mHelp   fcb CR,LF
 C342 50434745542076          fcc "PCGET v1.0 for Elektor EC-6809 FLEX"
 C349 312E3020666F72
 C350 20456C656B746F
 C357 722045432D3638
 C35E 303920464C4558
 C365 0D0A                    fcb CR,LF
 C367 50682E20526F65          fcc "Ph. Roehr - 12/2023"
 C36E 6872202D203132
 C375 2F32303233
 C37A 0D0A0A                  fcb CR,LF,LF
 C37D 55736167653A            fcc "Usage:"
 C383 0D0A                    fcb CR,LF
 C385 20205043474554          fcc "  PCGET FILE.EXT [W|L|R]"
 C38C 2046494C452E45
 C393 5854205B577C4C
 C39A 7C525D
 C39D 0D0A0A                  fcb CR,LF,LF
 C3A0 57686572653A            fcc "Where:"
 C3A6 0D0A                    fcb CR,LF
 C3A8 2020577C4C203D          fcc "  W|L = Force transfer as 'W'indows or 'L'inux text file"
 C3AF 20466F72636520
 C3B6 7472616E736665
 C3BD 72206173202757
 C3C4 27696E646F7773
 C3CB 206F7220274C27
 C3D2 696E7578207465
 C3D9 78742066696C65
 C3E0 0D0A                    fcb CR,LF
 C3E2 202052203D2054          fcc "  R = Treat as 'R'andom file"
 C3E9 72656174206173
 C3F0 20275227616E64
 C3F7 6F6D2066696C65
 C3FE 0D0A0A                  fcb CR,LF,LF
 C401 44656661756C74          fcc "Defaults:"
 C408 733A
 C40A 0D0A                    fcb CR,LF
 C40C 20205472616E73          fcc "  Transfer port: ACIA located at $EF60"
 C413 66657220706F72
 C41A 743A2041434941
 C421 206C6F63617465
 C428 64206174202445
 C42F 463630
 C432 0D0A                    fcb CR,LF
 C434 2020457874656E          fcc "  Extensions TXT, ASM, and BAS transfer as a Windows"
 C43B 73696F6E732054
 C442 58542C2041534D
 C449 2C20616E642042
 C450 4153207472616E
 C457 73666572206173
 C45E 20612057696E64
 C465 6F7773
 C468 0D0A                    fcb CR,LF
 C46A 20206F72204C69          fcc "  or Linux text file. All others as a binary file."
 C471 6E757820746578
 C478 742066696C652E
 C47F 20416C6C206F74
 C486 68657273206173
 C48D 20612062696E61
 C494 72792066696C65
 C49B 2E
 C49C 0D0A04                  fcb CR,LF,EOT
                          
 C49F 53746172742058  mStart  fcc "Start XMODEM send on the PC now..."
 C4A6 4D4F44454D2073
 C4AD 656E64206F6E20
 C4B4 74686520504320
 C4BB 6E6F772E2E2E
 C4C1 04                      fcb EOT

 C4C2 46696C65206578  mExists fcc "File exists, erase? "
 C4C9 697374732C2065
 C4D0 726173653F20
 C4D6 04                      fcb EOT

 C4D7 576F726B696E67  mWork   fcc "Working..."
 C4DE 2E2E2E
 C4E1 04                      fcb EOT

                      *-----------------------------------------------------------------------------
                      * Data area
                      *-----------------------------------------------------------------------------
 C4E2                 remPtr  rmb 2           ;xfrBuf remove pointer
 C4E4                 byteCnt rmb 1           ;byte count remaining
 C4E5                 mod252  rmb 1           ;byte count for last write
 C4E6                 saveX   rmb 2           ;generic save location for X
 C4E8                 fText   rmb 1           ;non-zero if text file

 C4E9                 portAdr rmb 2           ;serial port address
 C4EB                 insPtr  rmb 2           ;xfrBuf insert pointer
 C4ED                 xmRetry rmb 1           ;xmodem retry counter
 C4EE                 blkNum  rmb 1           ;current xmodem block number
 C4EF                 chkSum  rmb 1           ;packet checksum
 C4F0                 rcvBlk  rmb 1           ;block number received
 C4F1                 rcvNBlk rmb 1           ;NOT block number received
 C4F2                 ioSaveX rmb 2           ;save X for I/O subroutines

 C4F4                 xfrBuf  rmb 2*PKTLEN    ;XMODEM transfer buffer
 C5F4                 BUFEND  equ *           ;end of buffer address

 C100                     end pcGet

SYMBOL TABLE
       ACK 00 0006    BLKNUM 02 C4EE    BUFEND 02 C5F4   BYTECNT 02 C4E4
    CHKSUM 02 C4EF    CPU2MH 00 0000   CPU2MHZ 02 C105        CR 00 000D
     CTRLC 00 0003   DELFILE 00 000C    DSKERR 02 C166   DSPHELP 02 C16B
       EOF 00 001A       EOL 00 CC02       EOT 00 0004    EXISTS 00 0003
       FCB 00 C840    FCBBIN 00 003B    FCBCMD 00 0000    FCBERR 00 0001
    FCBEXT 00 000C     FCBFN 00 0004    FCBMAP 00 0017       FMS 00 D406
    FMSCLS 00 D403     FTEXT 02 C4E8    GETCHR 00 CD15    GETFIL 00 CD2D
   GETPARM 02 C2FE   GETTYPE 02 C2C8    GPEXIT 02 C33F    GPLOOP 02 C306
    GPRAND 02 C332    GPTEXT 02 C339     GTBIN 02 C2EB    GTEXIT 02 C2F3
    GTLOOP 02 C2D0    GTNEXT 02 C2E7    INSPTR 02 C4EB   IOSAVEX 02 C4F2
        LF 00 000A   MEXISTS 02 C4C2     MHELP 02 C340    MOD252 02 C4E5
    MSTART 02 C49F     MWORK 02 C4D7       NAK 00 0015    NAKPKT 02 C1C9
    NEXTCH 00 CD27   NOTCTLC 02 C1E1    NOTEOT 02 C1DB   OPENWRT 00 0002
    OPEWRT 02 C280   OWDELET 02 C2A4    OWEXIT 02 C2C7     PCGET 02 C100
   PGMEXIT 02 C15B    PKTLEN 00 0080   PKTLOOP 02 C1FE   PORTADR 02 C4E9
    PSTRNG 00 CD1E     PURGE 02 C239   PURGSIO 02 C237    RB1SEC 02 C25C
    RBLOOP 02 C25F    RBREAD 02 C27A   RCV1SEC 02 C251    RCVBLK 02 C4F0
   RCVBYTE 02 C253   RCVDONE 02 C159   RCVNBLK 02 C4F1    RCVPKT 02 C1CE
    REMPTR 02 C4E2    RPTERR 00 CD3F   SAVEMOD 02 C14E   SAVEPTR 02 C232
     SAVEX 02 C4E6    SBLOOP 02 C245    SECLEN 00 00FC    SIOADD 00 EF5C
   SIOADDR 02 C103   SIORDRF 00 0001   SIOTDRE 00 0002   SNDBYTE 02 C23F
       SOH 00 0001     SPACE 00 0020     START 02 C106    SUBMOD 02 C14C
       TAB 00 0009    TXTTBL 02 C2F4     WARMS 00 CD03     WDACK 02 C1C3
     WDBIN 02 C1A8    WDLOOP 02 C185    WDSKIP 02 C1B0     WDTAB 02 C1A2
    WPSAVE 02 C182   WRTFILE 02 C141   WRTLAST 02 C174    WRTPKT 02 C180
    XFRBUF 02 C4F4   XMRETRY 02 C4ED   XMTRIES 00 000A
103 SYMBOLS

0 error(s), 0 warning(s)
